const unsigned char AUREBESH_FONT[37][5] = {
  { B00000000, B00000000, B00000000, B00000000, B00000000 },
  { B01111111, B01100011, B01101011, B01100011, B01111111 },
  { B01111100, B00001100, B00001100, B00001100, B01111111 },
  { B01111111, B00000000, B01111111, B01100000, B01111111 },
  { B01111111, B00000011, B01110011, B00000011, B01111111 },
  { B00011011, B00110000, B01111111, B00000011, B00000011 },
  { B01111111, B00000000, B01111111, B00000011, B01111111 },
  { B01111111, B00000000, B01111111, B01100011, B01111111 },
  { B01111111, B00000011, B00000011, B00000011, B00000011 },
  { B01111111, B01100011, B00111111, B01100011, B01111111 },
  { B01111111, B01100011, B01111111, B00000000, B01111111 },
  { B00001000, B00011100, B00110110, B01100011, B01111111 },
  { B01111111, B01100001, B01101111, B01100001, B01111111 },
  { B00001111, B00011000, B00110000, B01100000, B01111111 },
  { B01111000, B01001100, B01000110, B01010011, B01011111 },
  { B01111111, B00000000, B00111110, B00000000, B01111111 },
  { B01111111, B00000011, B00111110, B00001100, B00011000 },
  { B01111110, B01100000, B01100110, B01100001, B01111111 },
  { B01100011, B01101011, B01101011, B01101011, B01100011 },
  { B00001110, B00011110, B00110110, B00000110, B00000110 },
  { B00000011, B01100011, B00110011, B00011011, B00001111 },
  { B01100011, B01111110, B00000000, B01111110, B01100011 },
  { B01100000, B01100011, B01100110, B01101100, B01111000 },
  { B01100010, B01110111, B01111101, B01101001, B01100010 },
  { B01100010, B01110001, B01111001, B01101101, B01100110 },
  { B00001000, B00011100, B00110110, B01100011, B01111111 },
  { B01111111, B01100001, B01101100, B01111000, B01100000 },
  { B00111111, B01100001, B01100001, B01101101, B00111001 },
  { B00111111, B01110010, B01101100, B01100110, B01100011 },
  { B00111110, B01100001, B01111100, B00000111, B01111110 },
  { B00011100, B00111110, B01101011, B00001000, B00001000 },
  { B01101111, B01101001, B01100010, B01100100, B01111000 },
  { B01000111, B01000110, B00101010, B00101010, B00010010 },
  { B00100011, B01001011, B01011111, B01110111, B00100011 },
  { B01100011, B00110110, B00011000, B01001100, B01100110 },
  { B01100011, B00110110, B00011100, B00001100, B00000110 },
  { B00111110, B01000111, B00011100, B01110001, B00111110 },
};

unsigned char asciiToAruebesh(unsigned char ascii) {
  unsigned char idx = ascii;

  // Check if non-printing and return 0:
  if(idx <= 32) return 0;
  
  // First subtract 32, putting SPACE at 0
  idx -= 32;

  // Check if we're in the extended char set (< 0):
  if(idx <= 15) return 0; // TOFU

  // Shift again to offset punctuation 1
  idx -= 15;

  // Return numbers:
  if(idx <= 10) return idx;

  // Return TOFU take 2, the semicolon boogaloo
  if(idx <= 17) return 0; // This ends at @ btw

  // Shift off punctuation 2
  idx -= 7;

  // A quick recap, A should now be 11 and we're (32+15+7 = 54) off from ASCII
  // at this point we only care about alphanumerics, so let's return those.
  if(idx <= 36) return idx;
  if(idx >= 43 && idx <= 68) return idx - 32; // Lower case conversion

  // Return the universal tofu:
  return 0;
}
